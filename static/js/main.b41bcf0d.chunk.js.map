{"version":3,"sources":["components/Header.js","components/NewDate.js","components/Date.js","components/DatesList.js","App.js","serviceWorker.js","index.js"],"names":["Header","titulo","className","initialState","cita","mascota","propietario","fecha","hora","sintomas","error","NewDate","state","handleChange","e","setState","target","name","value","handleSubmit","preventDefault","newDate","id","uuid","props","createNewDate","this","setTimeout","message","onSubmit","type","placeholder","onChange","Component","Date","deleteDate","onClick","DatesList","map","d","key","App","dates","filter","date","datesLS","localStorage","getItem","JSON","parse","setItem","stringify","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b41bcf0d.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types'\r\n\r\nconst Header = ({titulo}) => (  \r\n    <header>\r\n        <h1 className=\"text-center text-white\">\r\n            {titulo}\r\n        </h1>\r\n    </header>\r\n);\r\nHeader.propTypes = {\r\n    titulo: PropTypes.string.isRequired\r\n}\r\n \r\nexport default Header;","import React, { Component } from 'react';\r\nimport uuid from 'uuid';\r\n\r\n// esto se utiliza para que una vez se haya ejecutado el evento submit las variables del state queden vacias junto a los campols del form\r\nconst initialState = {\r\n    cita: {\r\n            mascota: '',\r\n            propietario: '',\r\n            fecha: '',\r\n            hora: '',\r\n            sintomas: ''\r\n        },\r\n        error: false\r\n}\r\nclass NewDate extends Component {\r\n\r\n    //this is the state here we have to add every input\r\n    state = {...initialState}\r\n    //this method process the event and here we can chage the state using this.setState{}\r\n    handleChange = (e) => {\r\n        \r\n        //this is a method, we have to use ()\r\n        //this method is used to sent the new dates from form to state\r\n        this.setState({\r\n            cita: {\r\n                ...this.state.cita,\r\n                [e.target.name] : e.target.value\r\n            }\r\n        })\r\n    }\r\n\r\n    //envio del formulario\r\n    handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        \r\n        // se extraen los valores del state\r\n        const { mascota, propietario, fecha, hora, sintomas } = this.state.cita;\r\n\r\n        // se validan los campos\r\n        if (mascota === '' || propietario === '' || fecha === '' || hora === '' || sintomas === '') {\r\n            this.setState({\r\n                error: true\r\n            });\r\n\r\n            return;\r\n        }\r\n        //generar objeto con los datos\r\n        const newDate = {...this.state.cita}\r\n        newDate.id = uuid();\r\n\r\n        // agrega la cita\r\n        this.props.createNewDate(newDate)\r\n\r\n            //empting every form input\r\n        this.setState({\r\n            ...initialState\r\n        })\r\n    }\r\n    \r\n    render() {\r\n\r\n        const { error } = this.state;\r\n        const message = () => {\r\n            /*{error ? <div className=\"alert alert-danger text-center\">Todos Los Campos son Obligatorios</div> : null}*/\r\n            if (error) {\r\n                return <div className=\"alert alert-danger text-center\">Todos Los Campos son Obligatorios</div>\r\n            }\r\n            setTimeout(() => {\r\n                return <div className=\"alert alert-danger text-center\"> </div>\r\n            }, 3000);\r\n        }\r\n        return (\r\n            <div className=\"card mt-2 py-3\">\r\n                <div className=\"card-body\">\r\n\r\n                    {message()}\r\n                    \r\n                    {/* por convencion a los eventos se les pone el prefijo handle seguido del nombre del evento */}\r\n                    <form onSubmit={this.handleSubmit}>\r\n\r\n                        <div className=\"form-group row\">\r\n                            <label className=\"col-sm-4 col-lg-2 col-form-label\">Nombre Mascota</label>\r\n                            <div className=\"col-sm-8 col-lg-10\">\r\n                                <input\r\n                                    type=\"text\"\r\n                                    className=\"form-control\"\r\n                                    placeholder=\"Nombre Mascota\"\r\n                                    name=\"mascota\"\r\n                                    onChange={this.handleChange}\r\n                                    //this is used to empty the inputs\r\n                                    value={this.state.cita.mascota}\r\n                                />\r\n                            </div>\r\n                        </div> {/* form-group end ! */}\r\n\r\n                        <div className=\"form-group row\">\r\n                            <label className=\"col-sm-4 col-lg-2 col-form-label\">Nombre Dueño</label>\r\n                            <div className=\"col-sm-8 col-lg-10\">\r\n                                <input\r\n                                    type=\"text\"\r\n                                    className=\"form-control\"\r\n                                    placeholder=\"Nombre Dueño Mascota\"\r\n                                    name=\"propietario\"\r\n                                    onChange={this.handleChange}\r\n                                    value={this.state.cita.propietario}\r\n                                />\r\n                            </div>\r\n                        </div> {/* form-group end ! */}\r\n\r\n                        <div className=\"form-group row\">\r\n                            <label className=\"col-sm-4 col-lg-2 col-form-label\">Fecha</label>\r\n                            <div className=\"col-sm-8 col-lg-4\">\r\n                                <input\r\n                                    type=\"date\"\r\n                                    className=\"form-control\"\r\n                                    name=\"fecha\"\r\n                                    onChange={this.handleChange}\r\n                                    value={this.state.cita.fecha}\r\n                                />\r\n                            </div>\r\n                            \r\n                            <label className=\"col-sm-4 col-lg-2 col-form-label\">Hora</label>\r\n                            <div className=\"col-sm-8 col-lg-4\">\r\n                                <input\r\n                                    type=\"time\"\r\n                                    className=\"form-control\"\r\n                                    name=\"hora\"\r\n                                    onChange={this.handleChange}\r\n                                    value={this.state.cita.hora}\r\n                                />\r\n                            </div>\r\n                        </div> {/* form-group end ! */}\r\n\r\n                        <div className=\"form-group row\">\r\n                            <label className=\"col-sm-4 col-lg-2 col-form-label\">Sintomas</label>\r\n                            <div className=\"col-sm-8 col-lg-10\">\r\n                                <textarea\r\n                                    className=\"form-control\"\r\n                                    name=\"sintomas\"\r\n                                    placeholder=\"Describe los sintomas\"\r\n                                    onChange={this.handleChange}\r\n                                    value={this.state.cita.sintomas}\r\n                                    \r\n                                >\r\n\r\n                                </textarea>\r\n                            </div>\r\n                        </div> {/* form-group end ! */}\r\n\r\n                        <input type=\"submit\" className=\"py-2 btn btn-block btn-success\" value=\"Agregar nueva cita\"/>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n \r\nexport default NewDate;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nconst Date = ({ cita, deleteDate }) => (  \r\n    <div className=\"media mt3\">\r\n        <div className=\"media-body\">\r\n            <h3 className=\"mt-0\">{cita.mascota}</h3>\r\n            <p className=\"card-text\"><span>Nombre Dueño: </span>{cita.propietario}</p>\r\n            <p className=\"card-text\"><span>Fecha: </span>{cita.fecha}</p>\r\n            <p className=\"card-text\"><span>Hora: </span>{cita.hora}</p>\r\n            <p className=\"card-text\"><span>Sintomas: </span></p>\r\n            <p className=\"card-text\">{cita.sintomas}</p>\r\n\r\n            <button\r\n                className=\"btn btn-danger\"\r\n                onClick={()=> deleteDate(cita.id)}\r\n            >\r\n                Eliminar &times;\r\n            </button>\r\n        </div>\r\n    </div>\r\n\r\n);\r\n\r\nDate.propTypes = {\r\n    cita: PropTypes.object.isRequired,\r\n    deleteDate: PropTypes.func.isRequired\r\n}\r\n \r\nexport default Date;","import React from 'react';\r\nimport Date from './Date';\r\nimport PropTypes from 'prop-types';\r\nconst DatesList = ({ cita, deleteDate }) => (  \r\n    <div className=\"card mt-2 py-5\">\r\n        <div className=\"card-body\">\r\n            <h2 className=\"card-title text-center\">Date Management</h2>\r\n            <div className=\"lista-citas\">\r\n                {cita.map(d => (\r\n                    <Date\r\n                        key={d.id}\r\n                        cita={d}\r\n                        deleteDate={deleteDate}\r\n                    />\r\n                ))}\r\n            </div>\r\n        </div>\r\n    </div>\r\n);\r\nDatesList.propTypes = {\r\n    cita: PropTypes.array.isRequired,\r\n    deleteDate: PropTypes.func.isRequired\r\n}\r\nexport default DatesList;","import React, { Component } from 'react';\nimport Header from './components/Header'\nimport NewDate from './components/NewDate';\nimport DatesList from './components/DatesList';\nclass App extends Component{\n    state = {\n        dates: []\n    }\n\n    componentDidMount() {\n        const datesLS = localStorage.getItem('dates');\n        if (datesLS) {\n            this.setState({\n                dates: JSON.parse(datesLS)\n            })\n        }\n    }\n\n    componentDidUpdate() {\n        localStorage.setItem('dates', JSON.stringify(this.state.dates));\n    }\n\n    createNewDate = d => {\n        //copiar el state\n        const dates = [...this.state.dates, d];\n\n        //agregar nuevo state\n        this.setState({\n            dates\n        })\n    }\n\n    deleteDate = id => {\n        //hacer una copia del state\n        const currentlyDates = [...this.state.dates];\n\n        //cuerpo de la funcion\n        const dates = currentlyDates.filter(date => date.id !== id);\n\n        //agregar cambios al state\n        this.setState({\n            dates\n        })\n    }\n\n    render() {\n        return (\n            <div className=\"container\">\n                <Header\n                    titulo=\"Pet Management\"\n                />\n                <div className=\"row\">\n                    <div className=\"col-md-12 col-mx-auto\">\n                        <NewDate\n                            createNewDate={this.createNewDate}\n                        />\n                    </div>\n                    <div className=\"mt-3 col-md-12 mx-auto\">\n                        <DatesList\n                            cita={this.state.dates}\n                            deleteDate={this.deleteDate}\n                        />\n                    </div>\n                </div>\n\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './bootstrap.min.css';\nimport './index.css'\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}